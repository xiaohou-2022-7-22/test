	//二维数组
	int a[3][4] = { 0 };
	printf("%d\n", sizeof(a));//48
	printf("%d\n", sizeof(a[0][0]));//4
	printf("%d\n", sizeof(a[0]));//16 -  a[0]相当于第一行，作为一维数组的数组名，sizeof(arr[0])把数组名
								 //单独放在sizeof()内，计算的是第一行的大小。
	printf("%d\n", sizeof(a[0] + 1));//4 - arr[0]是第一行的数组名，数组名是首元素地址。
									 //arr[0]其实就是第一行第一个元素地址。
	printf("%d\n", sizeof(*(a[0] + 1)));//4
	printf("%d\n", sizeof(a + 1));//4 - a是二维数组的数组名，没有sizeof(数组名)也没有&(数组名)，所以
								  //a是首元素地址，而把二维数组看为一维数组时，二维数组的首元素是
								  //他的第一行a就是第一行首元素的地址，a+1就是第二行的地址。
	printf("%d\n", sizeof(*(a+ 1)));//等价于sizeof(a[1])计算第二行的大小，单位字节。
	printf("%d\n", sizeof(&a[0] + 1));//4 - 第二行地址。
	printf("%d\n", sizeof(*&a[0] + 1));//16 - 计算第二行的大小，单位字节。
	printf("%d\n", sizeof(*a));//a是首元素地址，即第一行地址，*a就是第一行，sizeof（*a)就是计算第一行的大小。
	printf("%d\n", sizeof(a[3]));//16
